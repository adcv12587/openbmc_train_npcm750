From c9a5e3fe262d83904f9d4826db3e3c5d8fa360e5 Mon Sep 17 00:00:00 2001
From: CH Li <chli30@nuvoton.com>
Date: Mon, 18 Feb 2019 10:49:38 +0800
Subject: [PATCH] meta-evb-npcm750: phosphor-state-manager: fix chassis power
 control path

---
 chassis_state_manager.cpp | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/chassis_state_manager.cpp b/chassis_state_manager.cpp
index 8fd56b8..122b5de 100644
--- a/chassis_state_manager.cpp
+++ b/chassis_state_manager.cpp
@@ -61,18 +61,18 @@ void Chassis::subscribeToSystemdSignals()
 //        has read property function
 void Chassis::determineInitialState()
 {
-    sdbusplus::message::variant<int> pgood = -1;
+    sdbusplus::message::variant<int> PGood = -1;
     auto method = this->bus.new_method_call(
-        "org.openbmc.control.Power", "/org/openbmc/control/power0",
+        "xyz.openbmc_project.Chassis.Control.Power", "/xyz/openbmc_project/Chassis/Control/Power0",
         "org.freedesktop.DBus.Properties", "Get");
 
-    method.append("org.openbmc.control.Power", "pgood");
+    method.append("org.openbmc.control.Power", "PGood");
     try
     {
         auto reply = this->bus.call(method);
-        reply.read(pgood);
+        reply.read(PGood);
 
-        if (sdbusplus::message::variant_ns::get<int>(pgood) == 1)
+        if (sdbusplus::message::variant_ns::get<int>(PGood) == 1)
         {
             log<level::INFO>("Initial Chassis State will be On",
                              entry("CHASSIS_CURRENT_POWER_STATE=%s",
@@ -100,8 +100,8 @@ void Chassis::determineInitialState()
     }
     catch (const SdBusError& e)
     {
-        // It's acceptable for the pgood state service to not be available
-        // since it will notify us of the pgood state when it comes up.
+        // It's acceptable for the PGood state service to not be available
+        // since it will notify us of the PGood state when it comes up.
         if (e.name() != nullptr &&
             strcmp("org.freedesktop.DBus.Error.ServiceUnknown", e.name()) == 0)
         {
@@ -109,7 +109,7 @@ void Chassis::determineInitialState()
         }
 
         // Only log for unexpected error types.
-        log<level::ERR>("Error performing call to get pgood",
+        log<level::ERR>("Error performing call to get PGood",
                         entry("ERROR=%s", e.what()));
         goto fail;
     }
-- 
2.17.1

